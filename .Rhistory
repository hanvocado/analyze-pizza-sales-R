knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(readxl)
library(ggplot2)
library(arules)
library(arulesViz)
library(car)
library(randomForest)
library(broom)
sales_df <- read_excel("./data/Pizza Sales.xlsx")
head(sales_df)
str(sales_df)
df <- sales_df
colSums(is.na(df))
any(duplicated(df))
unique(df$pizza_size)
unique(df$pizza_category)
df$pizza_size <- factor(df$pizza_size, levels = c("S", "M", "L", "XL", "XXL"))
df$pizza_category <- factor(df$pizza_category)
temp_time <- format(df$order_time, "%H:%M:%S")
df <- df %>% mutate(order_hour = sub("(..):..:..", "\\1", temp_time))
head(df)
df <- mutate(df, order_weekday = weekdays(order_date))
df$order_weekday <- factor(df$order_weekday, levels = c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday"))
head(df)
df <- mutate(df, order_month = format(order_date, "%B"))
df$order_month <- factor(df$order_month, levels = c("January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"))
head(df)
rf_sales_model <- randomForest(sales ~ pizza_name + unit_price + pizza_size + pizza_category, data = train_data)
set.seed(123)
train_index <- sample(nrow(sales_data), 0.8 * nrow(sales_data))
sales_data <- df %>%  group_by(pizza_name, unit_price, pizza_size, pizza_category, order_month) %>% summarise(sales = sum(quantity))
dim(sales_data)
summary(sales_data)
set.seed(123)
train_index <- sample(nrow(sales_data), 0.8 * nrow(sales_data))
train_data <- sales_data[train_index, ]
test_data <- sales_data[-train_index, ]
rf_sales_model <- randomForest(sales ~ pizza_name + unit_price + pizza_size + pizza_category, data = train_data)
rf_sales_model
rf_sales_model <- randomForest(sales ~ pizza_name + unit_price + pizza_size + pizza_category, data = train_data, mtry = 2)
rf_sales_model
plot(rf_sales_model)
tune_rf <- tuneRF(sales_data[, -which(names(sales_data) == "sales")], sales_data$sales)
rf_sales_model <- randomForest(sales ~ unit_price + pizza_size + pizza_category, data = train_data, mtry = 2)
rf_sales_model
rf_sales_model <- randomForest(sales ~ pizza_name + unit_price + pizza_size + pizza_category, data = train_data)
rf_sales_model
rf_sales_model <- randomForest(sales ~ pizza_name + unit_price + pizza_size + pizza_category, data = train_data, mtry = 2)
rf_sales_model
predicted_sales <- predict(rf_sales_model, newdata = test_data)
head(predicted_sales)
actual_values <- test_data$sales
# Tính R2 (R-squared)
ss_total <- sum((actual_values - mean(actual_values))^2)
ss_residual <- sum((actual_values - predicted_sales)^2)
r_squared <- 1 - (ss_residual / ss_total)
cat("R-squared:", r_squared)
rmse <- sqrt(mean((predicted_sales - actual_values)^2))
cat("RMSE", rmse)
sales_data %>%
ggplot(aes(x = unit_price, y = sales, shape = pizza_size, color = pizza_category)) +
geom_jitter()
lm_sales_model <- lm(sales ~ pizza_name + unit_price * (pizza_size + pizza_category), data = sales_data)
summary(lm_sales_model)
str(sales_data)
plot(rf_sales_model)
tune_rf <- tuneRF(sales_data[, -which(names(sales_data) == "sales")], sales_data$sales)
rf_sales_model <- randomForest(sales ~ pizza_name + unit_price + pizza_size + pizza_category, data = train_data, mtry = 2)
rf_sales_model
predicted_sales <- predict(rf_sales_model, newdata = test_data)
head(predicted_sales)
actual_values <- test_data$sales
# Tính R2 (R-squared)
ss_total <- sum((actual_values - mean(actual_values))^2)
ss_residual <- sum((actual_values - predicted_sales)^2)
r_squared <- 1 - (ss_residual / ss_total)
cat("R-squared:", r_squared)
lm_sales_model <- lm(sales ~ pizza_name + unit_price * (pizza_category) + pizza_size, data = sales_data)
summary(lm_sales_model)
lm_sales_model <- lm(sales ~ pizza_name + unit_price * (pizza_size + pizza_category), data = sales_data)
summary(lm_sales_model)
lm_sales_model <- lm(sales ~ pizza_name + unit_price : (pizza_size + pizza_category), data = sales_data)
summary(lm_sales_model)
lm_sales_model <- lm(sales ~ pizza_name + unit_price * (pizza_size + pizza_category), data = sales_data)
summary(lm_sales_model)
sales_by_pizza_monthly <- df %>%
group_by(pizza_name, order_month) %>%
summarise(total_sales = sum(quantity))
ggplot(sales_by_pizza_monthly, aes(x = order_month, y = total_sales, color = pizza_name, group = pizza_name)) +
geom_line() +
geom_point() +
labs(title = "Doanh số của bánh pizza qua các tháng",
x = "Tháng",
y = "Doanh số ",
color = "Tên Pizza") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
guides(color = "none")
kruskal_test <- sales_by_pizza_monthly %>%
group_by(pizza_name) %>%
do({
kruskal_result <- kruskal.test(total_sales ~ order_month, data = .)
data.frame(pizza_name = unique(.$pizza_name), p_value = kruskal_result$p.value)
})
print(kruskal_test)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(readxl)
library(ggplot2)
library(arules)
library(arulesViz)
library(car)
library(randomForest)
library(broom)
sales_df <- read_excel("./data/Pizza Sales.xlsx")
head(sales_df)
str(sales_df)
df <- sales_df
colSums(is.na(df))
any(duplicated(df))
unique(df$pizza_size)
unique(df$pizza_category)
df$pizza_size <- factor(df$pizza_size, levels = c("S", "M", "L", "XL", "XXL"))
df$pizza_category <- factor(df$pizza_category)
temp_time <- format(df$order_time, "%H:%M:%S")
df <- df %>% mutate(order_hour = sub("(..):..:..", "\\1", temp_time))
head(df)
df <- mutate(df, order_weekday = weekdays(order_date))
df$order_weekday <- factor(df$order_weekday, levels = c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday"))
head(df)
df <- mutate(df, order_month = format(order_date, "%B"))
df$order_month <- factor(df$order_month, levels = c("January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"))
head(df)
by_order_df <- df %>% group_by(order_id) %>%
summarise(quantity = sum(quantity), order_date = order_date[1], total_price = sum(total_price), order_hour = order_hour[1], order_weekday = order_weekday[1], order_month = order_month[1]) %>% ungroup()
head(by_order_df)
by_order_df %>% count()
by_order_df %>% summarise(no_pizzas = sum(quantity), total_revenue = sum(total_price))
by_order_df %>% select(quantity, total_price) %>% summary()
by_order_df %>% ggplot(aes(x = total_price)) + geom_histogram(fill = "#FF9999") +
labs(title = "Phân bố của giá trị một đơn hàng", x = "Giá trị")
ggplot(data = df, aes(x = order_hour, y = quantity)) +
geom_col(fill = "blue") +
theme_minimal() +
labs(x = "Hour", y = "Frequency", title = "Pizza Consumption Demand by Hour") +
theme(plot.title = element_text(hjust = 0.5)
)
ggplot(data = df, aes(x = order_weekday, y = quantity)) +
geom_col(fill = "blue") +
theme_minimal() +
labs(x = "Date", y = "Frequency", title = "Pizza Consumption Demand by Day") +
theme(plot.title = element_text(hjust = 0.5)
)
ggplot(data = df, aes(x = order_month, y = quantity)) +
geom_col(fill = "blue") +
theme_minimal() +
labs(x = "Months", y = "Frequency", title = "Pizza Consumption Demand by Month") +
theme(axis.text.x = element_text(angle = 90, hjust = 1) ,
plot.title = element_text(hjust = 0.5))
ggplot(by_order_df, aes(x = order_month, fill = order_weekday)) +
geom_bar(position = "dodge", color = "black") +
scale_fill_brewer(palette = "Pastel1") +
theme_minimal() +
labs(x = "Months", y = "Frequency", title = "Pizza Consumption Demand by Day of the Week for Each Month") +
theme(axis.text.x = element_text(angle = 90, hjust = 1) ,
plot.title = element_text(hjust = 0.5))
ggplot(data = by_order_df, aes(x = order_weekday, y = order_hour, color = order_weekday)) +
geom_jitter(width = 0.2, height = 0) + # Tạo độ nhiễu ngang để các điểm không bị chồng lên nhau
theme_minimal() +
labs(x = "Order Dates", y = "Hour", title = "Pizza Consumption Demand by Hour of the Dates") +
theme(
legend.position = "none",
plot.title = element_text(hjust = 0.5)
)
df_table <- table(by_order_df$order_hour, by_order_df$order_weekday)
df_freq <- as.data.frame(df_table)
colnames(df_freq) <- c("Hour", "Day", "Frequency")
ggplot(df_freq, aes(x = Hour, y = Frequency, fill = Day)) +
geom_bar(stat = "identity", position = position_dodge(width = 0.8))  +
scale_fill_manual(values = c("blue", "red", "green", "yellow", "magenta", "cyan", "purple", "orange")) +
theme_minimal() +
labs(title = "Pizza Consumption Frequency by Hour of the Day", x = "Hour", y = "Frequency") +
theme(
plot.title = element_text(hjust = 0.5),
legend.title = element_blank()
) +
theme(legend.position = "right") +
theme(plot.margin = unit(c(1,1,1,1), "cm")) +
scale_x_discrete(expand = expansion(mult = c(0.1, 0.1)))
sales_by_size <- df %>%
group_by(pizza_size, order_month) %>%
summarise(
total_sales = sum(quantity)
)
head(sales_by_size)
ggplot(sales_by_size, aes(x = "", y = total_sales, fill = pizza_size)) +
geom_bar(stat = "identity") +
coord_polar(theta = "y") +
labs(title = "Doanh thu theo kích cỡ pizza") +
theme_void()
sales_by_category <- df %>%
group_by(pizza_category, order_month) %>%
summarise(
total_sales = sum(quantity)
)
sales_by_category
ggplot(sales_by_category, aes(x = pizza_category, y = total_sales, fill = order_month)) +
geom_col() +
labs(title = "Doanh số năm 2015 của từng danh mục bánh",
x = "Danh mục",
y = "Doanh số",
fill = "Tháng") +
theme_minimal()
sales_by_pizza <- df %>%
group_by(pizza_name) %>%
summarise(total_sales = sum(quantity))
sprintf("Số bánh pizza cửa hàng kinh doanh: %s", length(sales_by_pizza$pizza_name))
sales_by_pizza %>%
ggplot(aes(x = total_sales, y = reorder(pizza_name, total_sales))) +
geom_col(color = "pink", fill = "pink", width = 0.5) +
labs(title = "Tổng doanh số năm 2015",
x = "Số lượng",
y = "Pizza") +
theme_minimal()
df %>% select(pizza_name, pizza_size, unit_price, pizza_category, pizza_ingredients) %>%
group_by(pizza_name) %>% filter(pizza_name == 'The Classic Deluxe Pizza' | pizza_name == 'The Brie Carre Pizza' | pizza_name == 'The Mediterranean Pizza') %>% unique()
df %>% select(pizza_name, pizza_size) %>% unique() %>%
group_by(pizza_name) %>% summarise(no_variants = n()) %>%
merge(sales_by_pizza) %>% ggplot(aes(x = no_variants, y = total_sales)) + geom_point()
sales_by_pizza_monthly <- df %>%
group_by(pizza_name, order_month) %>%
summarise(total_sales = sum(quantity))
ggplot(sales_by_pizza_monthly, aes(x = order_month, y = total_sales, color = pizza_name, group = pizza_name)) +
geom_line() +
geom_point() +
labs(title = "Doanh số của bánh pizza qua các tháng",
x = "Tháng",
y = "Doanh số ",
color = "Tên Pizza") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
guides(color = "none")
kruskal_test <- sales_by_pizza_monthly %>%
group_by(pizza_name) %>%
do({
kruskal_result <- kruskal.test(total_sales ~ order_month, data = .)
data.frame(pizza_name = unique(.$pizza_name), p_value = kruskal_result$p.value)
})
print(kruskal_test)
sales_data <- df %>%  group_by(pizza_name, unit_price, pizza_size, pizza_category, order_month) %>% summarise(sales = sum(quantity))
dim(sales_data)
summary(sales_data)
sales_data %>%
ggplot(aes(x = unit_price, y = sales, shape = pizza_size, color = pizza_category)) +
geom_jitter()
lm_sales_model <- lm(sales ~ pizza_name + unit_price * (pizza_size + pizza_category), data = sales_data)
summary(lm_sales_model)
set.seed(123)
train_index <- sample(nrow(sales_data), 0.8 * nrow(sales_data))
train_data <- sales_data[train_index, ]
test_data <- sales_data[-train_index, ]
rf_sales_model <- randomForest(sales ~ pizza_name + unit_price + pizza_size + pizza_category, data = train_data)
rf_sales_model
plot(rf_sales_model)
tune_rf <- tuneRF(sales_data[, -which(names(sales_data) == "sales")], sales_data$sales)
rf_sales_model <- randomForest(sales ~ pizza_name + unit_price + pizza_size + pizza_category, data = train_data, mtry = 2)
rf_sales_model
predicted_sales <- predict(rf_sales_model, newdata = test_data)
head(predicted_sales)
actual_values <- test_data$sales
# Tính R2 (R-squared)
ss_total <- sum((actual_values - mean(actual_values))^2)
ss_residual <- sum((actual_values - predicted_sales)^2)
r_squared <- 1 - (ss_residual / ss_total)
cat("R-squared:", r_squared)
rmse <- sqrt(mean((predicted_sales - actual_values)^2))
cat("RMSE", rmse)
